// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import nats "github.com/nats-io/nats.go"
import time "time"

// NatsConn is an autogenerated mock type for the NatsConn type
type NatsConn struct {
	mock.Mock
}

// AuthRequired provides a mock function with given fields:
func (_m *NatsConn) AuthRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Barrier provides a mock function with given fields: f
func (_m *NatsConn) Barrier(f func()) error {
	ret := _m.Called(f)

	var r0 error
	if rf, ok := ret.Get(0).(func(func()) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Buffered provides a mock function with given fields:
func (_m *NatsConn) Buffered() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChanQueueSubscribe provides a mock function with given fields: subj, group, ch
func (_m *NatsConn) ChanQueueSubscribe(subj string, group string, ch chan *nats.Msg) (*nats.Subscription, error) {
	ret := _m.Called(subj, group, ch)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, string, chan *nats.Msg) *nats.Subscription); ok {
		r0 = rf(subj, group, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chan *nats.Msg) error); ok {
		r1 = rf(subj, group, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChanSubscribe provides a mock function with given fields: subj, ch
func (_m *NatsConn) ChanSubscribe(subj string, ch chan *nats.Msg) (*nats.Subscription, error) {
	ret := _m.Called(subj, ch)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, chan *nats.Msg) *nats.Subscription); ok {
		r0 = rf(subj, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, chan *nats.Msg) error); ok {
		r1 = rf(subj, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *NatsConn) Close() {
	_m.Called()
}

// ConnectedAddr provides a mock function with given fields:
func (_m *NatsConn) ConnectedAddr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConnectedServerId provides a mock function with given fields:
func (_m *NatsConn) ConnectedServerId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConnectedUrl provides a mock function with given fields:
func (_m *NatsConn) ConnectedUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DiscoveredServers provides a mock function with given fields:
func (_m *NatsConn) DiscoveredServers() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Drain provides a mock function with given fields:
func (_m *NatsConn) Drain() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *NatsConn) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushTimeout provides a mock function with given fields: timeout
func (_m *NatsConn) FlushTimeout(timeout time.Duration) error {
	ret := _m.Called(timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushWithContext provides a mock function with given fields: ctx
func (_m *NatsConn) FlushWithContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClientID provides a mock function with given fields:
func (_m *NatsConn) GetClientID() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsClosed provides a mock function with given fields:
func (_m *NatsConn) IsClosed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsConnected provides a mock function with given fields:
func (_m *NatsConn) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsDraining provides a mock function with given fields:
func (_m *NatsConn) IsDraining() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsReconnecting provides a mock function with given fields:
func (_m *NatsConn) IsReconnecting() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LastError provides a mock function with given fields:
func (_m *NatsConn) LastError() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MaxPayload provides a mock function with given fields:
func (_m *NatsConn) MaxPayload() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// NewRespInbox provides a mock function with given fields:
func (_m *NatsConn) NewRespInbox() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NumSubscriptions provides a mock function with given fields:
func (_m *NatsConn) NumSubscriptions() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Publish provides a mock function with given fields: subj, data
func (_m *NatsConn) Publish(subj string, data []byte) error {
	ret := _m.Called(subj, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(subj, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishMsg provides a mock function with given fields: m
func (_m *NatsConn) PublishMsg(m *nats.Msg) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nats.Msg) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishRequest provides a mock function with given fields: subj, reply, data
func (_m *NatsConn) PublishRequest(subj string, reply string, data []byte) error {
	ret := _m.Called(subj, reply, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(subj, reply, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueSubscribe provides a mock function with given fields: subj, queue, cb
func (_m *NatsConn) QueueSubscribe(subj string, queue string, cb nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(subj, queue, cb)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(subj, queue, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, nats.MsgHandler) error); ok {
		r1 = rf(subj, queue, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueSubscribeSync provides a mock function with given fields: subj, queue
func (_m *NatsConn) QueueSubscribeSync(subj string, queue string) (*nats.Subscription, error) {
	ret := _m.Called(subj, queue)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, string) *nats.Subscription); ok {
		r0 = rf(subj, queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(subj, queue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueSubscribeSyncWithChan provides a mock function with given fields: subj, queue, ch
func (_m *NatsConn) QueueSubscribeSyncWithChan(subj string, queue string, ch chan *nats.Msg) (*nats.Subscription, error) {
	ret := _m.Called(subj, queue, ch)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, string, chan *nats.Msg) *nats.Subscription); ok {
		r0 = rf(subj, queue, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, chan *nats.Msg) error); ok {
		r1 = rf(subj, queue, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request provides a mock function with given fields: subj, data, timeout
func (_m *NatsConn) Request(subj string, data []byte, timeout time.Duration) (*nats.Msg, error) {
	ret := _m.Called(subj, data, timeout)

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func(string, []byte, time.Duration) *nats.Msg); ok {
		r0 = rf(subj, data, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte, time.Duration) error); ok {
		r1 = rf(subj, data, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestWithContext provides a mock function with given fields: ctx, subj, data
func (_m *NatsConn) RequestWithContext(ctx context.Context, subj string, data []byte) (*nats.Msg, error) {
	ret := _m.Called(ctx, subj, data)

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *nats.Msg); ok {
		r0 = rf(ctx, subj, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, subj, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Servers provides a mock function with given fields:
func (_m *NatsConn) Servers() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SetClosedHandler provides a mock function with given fields: cb
func (_m *NatsConn) SetClosedHandler(cb nats.ConnHandler) {
	_m.Called(cb)
}

// SetDisconnectHandler provides a mock function with given fields: dcb
func (_m *NatsConn) SetDisconnectHandler(dcb nats.ConnHandler) {
	_m.Called(dcb)
}

// SetDiscoveredServersHandler provides a mock function with given fields: dscb
func (_m *NatsConn) SetDiscoveredServersHandler(dscb nats.ConnHandler) {
	_m.Called(dscb)
}

// SetErrorHandler provides a mock function with given fields: cb
func (_m *NatsConn) SetErrorHandler(cb nats.ErrHandler) {
	_m.Called(cb)
}

// SetReconnectHandler provides a mock function with given fields: rcb
func (_m *NatsConn) SetReconnectHandler(rcb nats.ConnHandler) {
	_m.Called(rcb)
}

// Stats provides a mock function with given fields:
func (_m *NatsConn) Stats() nats.Statistics {
	ret := _m.Called()

	var r0 nats.Statistics
	if rf, ok := ret.Get(0).(func() nats.Statistics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nats.Statistics)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *NatsConn) Status() nats.Status {
	ret := _m.Called()

	var r0 nats.Status
	if rf, ok := ret.Get(0).(func() nats.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nats.Status)
	}

	return r0
}

// Subscribe provides a mock function with given fields: subj, cb
func (_m *NatsConn) Subscribe(subj string, cb nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(subj, cb)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(subj, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = rf(subj, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeSync provides a mock function with given fields: subj
func (_m *NatsConn) SubscribeSync(subj string) (*nats.Subscription, error) {
	ret := _m.Called(subj)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string) *nats.Subscription); ok {
		r0 = rf(subj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TLSRequired provides a mock function with given fields:
func (_m *NatsConn) TLSRequired() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
